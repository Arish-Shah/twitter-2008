generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  username         String        @unique @db.VarChar(15)
  email            String        @unique @db.VarChar(50)
  password         String
  profile          Profile?
  updates          Update[]
  sentMessages     Message[]     @relation("message_from")
  receivedMessages Message[]     @relation("message_to")
  favorited        Favorites[]
  following        Follows[]     @relation("follower")
  followedBy       Follows[]     @relation("following")
  notice           Notice?
  blocking         Blocks[]      @relation("blocker")
  blockedBy        Blocks[]      @relation("blocking")
  deviceUpdate     DeviceUpdate?
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  @@map("users")
}

model Profile {
  id             Int             @id @default(autoincrement())
  name           String?         @db.VarChar(20)
  web            String?
  bio            String?         @db.VarChar(160)
  location       String?         @db.VarChar(30)
  language       LanguageEnum    @default(EN)
  private        Boolean         @default(false)
  picture        String
  pictureChanged Boolean         @default(false) @map("picture_changed")
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int             @unique @map("user_id")
  theme          Theme?
  checkList      CheckListEnum[] @map("check_list")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@map("profiles")
}

model Theme {
  id              Int      @id @default(autoincrement())
  text            String   @db.VarChar(7)
  background      String   @db.VarChar(7)
  links           String   @db.VarChar(7)
  sidebar         String   @db.VarChar(7)
  sidebarBorder   String   @map("sidebar_border") @db.VarChar(7)
  backgroundImage String   @map("background_image")
  tile            Boolean
  profile         Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId       Int      @unique @map("profile_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("themes")
}

model Update {
  id          Int         @id @default(autoincrement())
  text        String      @db.VarChar(140)
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int         @map("author_id")
  parent      Update?     @relation("parent_replies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    Int?        @map("parent_id")
  replies     Update[]    @relation("parent_replies")
  favoritedBy Favorites[]
  createdAt   DateTime    @default(now()) @map("created_at")

  @@map("updates")
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String   @db.VarChar(140)
  from      User     @relation("message_from", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    Int      @map("from_id")
  to        User     @relation("message_to", fields: [toId], references: [id], onDelete: Cascade)
  toId      Int      @map("to_id")
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("messages")
}

model Follows {
  follower      User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId    Int      @map("follower_id")
  following     User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId   Int      @map("following_id")
  deviceUpdates Boolean  @default(false) @map("device_updates")
  createdAt     DateTime @default(now()) @map("created_at")

  @@id([followerId, followingId])
  @@map("follows")
}

model Favorites {
  update    Update   @relation(fields: [updateId], references: [id], onDelete: Cascade)
  updateId  Int      @map("update_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([updateId, userId])
  @@map("favorites")
}

model Blocks {
  blocker    User     @relation("blocker", fields: [blockerId], references: [id])
  blockerId  Int      @map("blocker_id")
  blocking   User     @relation("blocking", fields: [blockingId], references: [id])
  blockingId Int      @map("blocking_id")
  createdAt  DateTime @default(now()) @map("created_at")

  @@id([blockerId, blockingId])
  @@map("blocks")
}

model Notice {
  id          Int       @id @default(autoincrement())
  nudge       Boolean   @default(false)
  replies     ReplyEnum @default(FOLLOWING)
  newFollower Boolean   @default(true) @map("new_follower")
  directText  Boolean   @default(true) @map("direct_text")
  newsletter  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @unique @map("user_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("notices")
}

model DeviceUpdate {
  id        Int              @id @default(autoincrement())
  phone     Int?
  type      DeviceUpdateEnum @default(ON)
  custom    Boolean
  offFrom   Int              @map("off_from")
  offTo     Int              @map("off_to")
  user      User             @relation(fields: [userId], references: [id])
  userId    Int              @unique @map("user_id")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  @@map("device_updates")
}

enum LanguageEnum {
  EN

  @@map("language_enum")
}

enum ReplyEnum {
  ALL
  FOLLOWING
  NONE

  @@map("reply_enum")
}

enum DeviceUpdateEnum {
  ON
  OFF
  DIRECT_MESSAGES

  @@map("device_update_enum")
}

enum CheckListEnum {
  ONE
  TWO
  THREE

  @@map("check_list_enum")
}
